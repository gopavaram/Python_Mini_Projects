DDL (Data Definition Language) - CREATE, ALTER, DROP, TRUNCATE, RENAME
DML (Data Manipulation Language) - INSERT, UPDATE, DELETE, SELECT
DCL (Data Control Language) - GRANT, REVOKE


CREATE TABLE amazon_orders(
order_id intiger,
order_date date
);

alter table amazon_orders alter column order_date datetime; --DDL
alter table amazon_orders add username varchar(20);

insert into amazon_orders values (5, '2202-10-01 12:05:12');

CTE- Common table expression   WITH AS
Window functions:
Row_number () - 1,2,3,4,5
Rank ()  - 1,2,3,3,5
DENSE_RANK() - assigns a ranking to rows without skipping ranks 1,2,3,3,4,5
lag( 2,0)


# Write your MySQL query statement below
select s.student_id, s.student_name, b.subject_name, count(e.subject_name) as attended_exams
from Students s
cross join Subjects b
left join Examinations as e
on e.student_id = s.student_id
and b.subject_name = e.subject_name
group by s.student_id, s.student_name, b.subject_name
order by s.student_id, b.subject_name



# Write your MySQL query statement below
select e1.name
from Employee e1
join Employee e2
on e1.id=e2.managerId
group by e2.managerId
having count(e2.managerId)>=5


# Write your MySQL query statement below
SELECT s.user_id, ifnull(round(sum(c.action ='confirmed')/count(c.action),2), 0.00) AS confirmation_rate
#round(avg(if(c.action = 'confirmed' ,1,0)),2)
FROM Signups s
left Join Confirmations c
on s.user_id = c.user_id
GROUP BY s.user_id;


# Write your MySQL query statement below
select candidate_id from candidates
WHERE skill in ('Python', 'Tableau', 'PostgreSQL')
GROUP by candidate_id
HAVING count(skill) =3 ;

# Write your MySQL query statement below
SELECT p1.page_id
FROM pages p1
left JOIN page_likes p2
on p1.page_id = p2.page_id
Where p2.page_id is NULL
order by p1.page_id;

# Write your MySQL query statement below
select sum(case WHEN device_type = 'laptop' Then 1 else 0 END) as laptop_views,
sum(case when device_type IN('phone', 'tablet') then 1 else 0 END) as mobile_views
from viewership;

# Write your MySQL query statement below
SELECT user_id, MAX(post_date::DATE) - MIN(post_date::DATE) AS days_between
FROM posts
WHERE post_date BETWEEN '2021-01-01' AND '2021-12-31'
group by user_id
HAVING COUNT(user_id) > 2;


# Write your MySQL query statement below
SELECT sender_id, count(sender_id) as message_count
FROM messages
where sent_date between '2022-08-01' and '2022-08-31'
GROUP by sender_id
order by message_count DESC
LIMIT 2;

# Write your MySQL query statement below
SELECT  EXTRACT(MONTH from submit_date) as mth, product_id AS product, round(avg(stars),2) as avg_stars
FROM reviews
group by product_id, mth
order by mth, product_id;


# Write your MySQL query statement below
select e2.employee_id, e2.name as employee_name
from employee e1
left join employee e2
on e1.employee_id = e2.manager_id
where e2.salary > e1.salary
order by e2.manager_id;


# Write your MySQL query statement below
select * 
from Cinema
where id%2!=0
and description != 'boring'
order by rating DESC;


# Write your MySQL query statement below
select p.product_id  , ifnull(round(sum(p.price*u.units)/sum(u.units),2),0) as average_price
from Prices p
left Join UnitsSold u
on p.product_id=u.product_id
and u.purchase_date between p.start_date and p.end_date
group by  product_id


# Write your MySQL query statement below
select  contest_id, round(count(distinct user_id )*100/(select count(user_id) from Users),2) as percentage
from Register
group by contest_id
order by percentage DESC, contest_id ASC


# Write your MySQL query statement below
select query_name, round(avg(rating/position),2) as quality, round(avg(if(rating < 3,1,0))*100,2) as poor_query_percentage
from Queries
where query_name is not Null
group by query_name


# Write your MySQL query statement below
SELECT DATE_FORMAT(trans_date, '%Y-%m') As month, country, count(state) as trans_count,sum(if(state='approved' ,1,0)) as approved_count, sum(amount) as  trans_total_amount, SUM(IF(state = 'approved', amount, 0)) AS approved_total_amount
from Transactions
group by country, month


# Write your MySQL query statement below
select ROUND(SUM(IF(o = c, 1, 0)) * 100.0 / COUNT(o), 2) AS immediate_percentage
from
(select delivery_id, customer_id, min(order_date) as o, min(customer_pref_delivery_date) as c
from Delivery
group by customer_id) as new_table

# Write your MySQL query statement below
select round(sum(A)/count(distinct player_id),2) as fraction
from
(select  *, DATEDIFF(event_date, min(event_date) OVER (PARTITION BY player_id ORDER BY event_date)) = 1 as A
from Activity) as New_table

# Write your MySQL query statement below
SELECT product_id, year AS first_year, quantity, price
FROM (
    SELECT *, 
           dense_rank () OVER (PARTITION BY product_id ORDER BY year) AS rn
    FROM Sales
) AS new_table
WHERE rn = 1;


# Write your MySQL query statement below
select employee_id, department_id
from Employee
group by employee_id
having count(department_id) = 1
union
select employee_id, department_id
from Employee
where primary_flag = 'Y'
group by employee_id


UPDATE Salary
SET sex = CASE 
            WHEN sex = 'm' THEN 'f' 
            WHEN sex = 'f' THEN 'm' 
            ELSE sex -- Keeps values unchanged if not 'm' or 'f'
          END;



# Write your MySQL query statement below
select 
case
when id = (select max(id) from Seat) and id%2=1 then id
when id%2=1 then id+1 else id-1 end as id, student
from Seat
order by id


# Write your MySQL query statement below
(select u.name as results
from Users u
left join MovieRating mr
on u.user_id = mr.user_id
group by u.user_id
order by count(u.user_id) desc, u.name
limit 1)
union all
(select m.title as results
from Movies m
left join MovieRating mr
on m.movie_id = mr.movie_id
where Extract(Year_Month from created_at)= 202002
group by m.movie_id
order by avg(mr.rating) desc, m.title
limit 1)


# Write your MySQL query statement below
select sell_date, count(distinct product) as num_sold, GROUP_CONCAT( DISTINCT product order by product ASC separator ',' ) as products
from Activities
group by sell_date
ORDER BY sell_date ASC;


-- Write your PostgreSQL query statement below
select sell_date, count(distinct product) as num_sold, STRING_AGG(Distinct product, ',') AS products
from Activities
group by sell_date
ORDER BY sell_date ASC;


# Write your MySQL query statement below
select employee_id, 
    case    
            when employee_id%2 !=0 and name not like 'M%' then salary
            else 0 end 
        as bonus
from Employees
order by employee_id

# Write your MySQL query statement below
select user_id, max(time_stamp) as last_stamp
from Logins
where year(time_stamp)='2020'
group by user_id
order by time_stamp desc

